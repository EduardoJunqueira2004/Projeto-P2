import java.util.HashMap;
import java.util.Map;

public class exemplos {
    private String enderecoIP;
    private String nome;
    private Switch switchConectado;

    public Computador(String enderecoIP, String nome) {
        this.enderecoIP = enderecoIP;
        this.nome = nome;
    }

    public void conectarASwitch(Switch switchConectado) {
        this.switchConectado = switchConectado;
    }

    public void enviarDados(String dados, String enderecoIPDestino) {
        switchConectado.receberDadosDeComputador(dados, enderecoIPDestino, this.enderecoIP);
    }

    public void receberDados(String dados, String enderecoIPOrigem) {
        System.out.println(nome + " recebeu dados de " + enderecoIPOrigem + ": " + dados);
    }

    public String getEnderecoIP() {
        return enderecoIP;
    }

    public String getNome() {
        return nome;
    }

    public Switch getSwitchConectado() {
        return switchConectado;
    }

    public void setEnderecoIP(String enderecoIP) {
        this.enderecoIP = enderecoIP;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public void setSwitchConectado(Switch switchConectado) {
        this.switchConectado = switchConectado;
    }

    @Override
    public String toString() {
        return "Computador{" + "enderecoIP=" + enderecoIP + ", nome=" + nome + ", switchConectado=" + switchConectado + '}';
    }

    // Getters e Setters
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    Computador pc1 = new Computador("192.168.1.2", "PC1");
        Computador pc2 = new Computador("192.168.1.3", "PC2");
        Switch switch1 = new Switch();
        
        pc1.conectarASwitch(switch1);
        pc2.conectarASwitch(switch1);
        switch1.conectarComputador(pc1);
        switch1.conectarComputador(pc2);

        pc1.enviarDados("OlÃ¡ PC2", "192.168.1.3");
    

        class Roteador {
    private Map<String, Switch> switchesConectados;
    private Map<String, String> tabelaRoteamento; // Mapeia endereços IP para switches específicos

    public Roteador() {
        switchesConectados = new HashMap<>();
        tabelaRoteamento = new HashMap<>();
    }

    public void conectarSwitch(Switch switchConectado, String enderecoIPSwitch) {
        switchesConectados.put(enderecoIPSwitch, switchConectado);
        // Pode-se adicionar lógica para atualizar a tabela de roteamento aqui
    }

    public void receberDadosDeSwitch(String dados, String enderecoIPDestino, String enderecoIPOrigem) {
        System.out.println("Roteador recebeu dados de " + enderecoIPOrigem + " para " + enderecoIPDestino);
        encaminharDados(dados, enderecoIPDestino, enderecoIPOrigem);
    }

    private void encaminharDados(String dados, String enderecoIPDestino, String enderecoIPOrigem) {
        // Implementar a lógica de roteamento aqui
        // Por exemplo, verificar a tabela de roteamento e encaminhar para o switch correto
        // Por enquanto, vamos apenas imprimir uma mensagem
        System.out.println("Encaminhando dados para " + enderecoIPDestino);
    }

    // Getters e Setters
    public Map<String, Switch> getSwitchesConectados() {
        return switchesConectados;
    }
    
    public Map<String, String> getTabelaRoteamento() {
        return tabelaRoteamento;
    }

    public void setSwitchesConectados(Map<String, Switch> switchesConectados) {
        this.switchesConectados = switchesConectados;
    }

    public void setTabelaRoteamento(Map<String, String> tabelaRoteamento) {
        this.tabelaRoteamento = tabelaRoteamento;
    }

    @Override
    public String toString() {
        return "Roteador{" + "switchesConectados=" + switchesConectados + ", tabelaRoteamento=" + tabelaRoteamento + '}';
    }
}

}


